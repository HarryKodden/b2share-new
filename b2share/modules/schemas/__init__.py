# -*- coding: utf-8 -*-
#
# This file is part of EUDAT B2Share.
# Copyright (C) 2016 University of Tuebingen, CERN.
# Copyright (C) 2015 University of Tuebingen.
#
# B2Share is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# B2Share is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with B2Share; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

"""B2SHARE Schemas module.


Every record, be it a published record or a draft record, has a JSON Schema.
Those schemas are used by invenio-records in order to validate the records
metadata.

Use cases
^^^^^^^^^

In B2SHARE we created the ``b2share.modules.schemas`` module which:

* provides a common set of fields which exist in every record.
* enables communities to extend this common set of fields with their own
  additional fields.
* prevents collisions between community-specific fields even if they have the
  same name.
* enable communities to share definitions of community-specific fields.
* enable community schemas to evolve while keeping old records valid. This is
  done by keeping old schema versions availables.

see http://hdl.handle.net/11304/ec6d0870-9817-43cb-9285-5db6a2aaa0e9 for a
presentation of b2share schemas.


Design
^^^^^^

Schemas are split in 3 types:

* one **root schema**: this schema contains the fields common to every
  record. It is provided by the B2SHARE software itself. It is versioned
  so that it can evolve in future versions of B2SHARE. All versions are stored
  in JSON files in ``b2share.modules.schemas.root_schemas``.
* **block schemas**: block schemas are defined by communities. They enable
  to extend the root schema by adding additional fields. Those schemas are
  versionned too. Each block schema has a unique ID (UUID).
* **community schemas**: schemas used by communities to validate their records.
  These are the schemas available at /api/communities/<ID>/schemas/<NB>.
  They are composed of a JSON Schema which can combine multiple Block Schemas,
  and a root schema version number. The resulting schema is generated by
  ``b2share.modules.schemas.api.CommunitySchema.build_json_schema``.

Block schemas are designed to be shared by communities. That way they can
cooperate and follow the same standards.

A concrete example of a use case would be to have a set of fields mandatory
for every scientific department in a university and then other sets of fields
specific to each department.
Each department would define the set of fields they require in a specific block
schema. Then the university would define the common mandatory fields in another
"university" block schema. Each department would create a community and define
a community schema using both their specific block schema and the "university"
block schema. Ex: physics department fields + university fields.
The Community schema of each department would be used for their own
publications.

All schemas are backward compatible, i.e. if a field is defined with a
specific type (ex: string, number, object, ...) it cannot change its type
in another schema version. The only way to have a different type is to
deprecate the field (forbid its use) and create a new one with a different
name.

A record's structure is like this:

.. code-block:: json

    {
        "$schema": ".../api/communities/<ID>/schemas/0",
        "titles": [{
            "title": "..."
        }],
        "community": "<COMMUNITY_UUID>",
        "<OTHER_ROOT_SCHEMA_FIELDS>": "..."
        "community_specific": {
            "<BLOCK_SCHEMA_UUID>": {
                "<COMMUNITY_SPECIFIC_FIELD1>": "...",
                "<COMMUNITY_SPECIFIC_FIELD2>": ["...", "..."],
            }
        }
    }

All block schemas are grouped under ``community_specific`` so that they can't
conflict with the root schema fields. They are also keyed by their block
schema UUID so that different block schemas' fields cannot conflict. This
enable to search specifically for one specific field from a given block schema.

UUIDs are used everywhere, be it in community ids, block-schema ids, etc... The
goal was to enable records to be migrated from one B2SHARE instance to another
without any conflict. This is not part of our requirements but experience tells
us that no organization lasts forever.

**Current implementation limits and future work**

We didn't have time to implement fully the design defined above. The model
and API enables it but the REST API and UI is limited on purpose as we didn't
want to support a half finished feature. The only way for now to add schemas
is via CLI. A community schema can only reference one block schema and the
the structure is imposed. These restrictions could be removed in the future
without breaking the API.

The elasticsearch mapping is very basic. The ``domapping`` library was
implemented in Invenio in order to generate elasticsearch mappings from
JSON Schemas. The goal was to use it for B2SHARE but we didn't have the time
to do it up to now. The result is that every field in ``community_schema``
is a parsed as a ``string``.

Schemas are immediately published right now. A draft phase could be useful
in order to test the schema.

There is no way yet to modify a record's scema. This is an important and easy
step to implement. It should be high on the TODO list. Simply enabling the
the community_administrator to change the "$schema" field to the next
version of the same community schema should be enough.

**Hacks**

We differentiate deposits (aka draft records) from published records via their
``$schema`` field value. See
:py:func:`b2share.modules.records.utils.is_publication` and
:py:func:`b2share.modules.records.utils.is_deposit`.

Both schemas are available at the same endpoint but with a different JSON
pointer. The draft JSON Schema is in fact the same as the published record
schema. The only difference is that the API will detect the draft record schema
JSON pointer and ignore **required fields**. This enables users to save in
progress deposits.

"""

from __future__ import absolute_import, print_function

from .ext import B2ShareSchemas
from .api import RootSchema, BlockSchema, CommunitySchema

from .validate import metaschema_validator

__all__ = ('B2ShareSchemas', 'BlockSchema', 'CommunitySchema', 'RootSchema')
